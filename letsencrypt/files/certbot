{%- from "letsencrypt/map.jinja" import client with context -%}
{#-
    vim: syntax=jinja
-#}
#!/bin/bash
# ==================================================
# This file is managed by SaltStack certbot formula.
# Manual changes may be overwritten.
# ==================================================
#
# Run certbot in a container
#
# This script will attempt to mirror the host paths by using volumes for the
# following paths:
#   * {{ conf_dir }}
#   * according paths if webroot auth is used
#
# You can add additional volumes (or any docker run options) using
# the $CERTBOT_OPTIONS environment variable.
#


set -e

IMAGE=${IMAGE:-"{{ image }}"}
CONF_DIR=${CONF_DIR:-"{{ conf_dir }}"}

if [ -d "$CONF_DIR" ]; then
    VOLUMES="-v $CONF_DIR:$CONF_DIR"
fi

{#- Generate list of volumes that we need based on model. But best solution
    would be to parse command-line args and decide on that #}
{%- if client.auth.method == 'webroot' %}
VOLUMES="$VOLUMES -v {{ client.auth.path|default('/var/www') }}:{{ client.auth.path|default('/var/www') }}"
{%- endif %}
{%- for domain in client.get('domain', {}).iteritems() %}
{%- if domain.get('auth', {}).get('method', None) == 'webroot' %}
VOLUMES="$VOLUMES -v {{ domain.auth.path|default('/var/www') }}:{{ domain.auth.path|default('/var/www') }}"
{%- endif %}
{%- endfor %}
{%- if client.hook %}
VOLUMES="$VOLUMES -v /usr/local/lib/certbot/hooks/deploy-hook:/usr/local/lib/certbot/hooks/deploy-hook"
{%- endif %}

# Only allocate tty if we detect one
if [ -t 1 ]; then
    DOCKER_RUN_OPTIONS="-t"
fi
if [ -t 0 ]; then
    DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"
fi

exec docker run --rm $DOCKER_RUN_OPTIONS --network host $CERTBOT_OPTIONS $VOLUMES $IMAGE certbot "$@"
